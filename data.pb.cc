// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class SmallRadarTargetInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SmallRadarTargetInfo>
      _instance;
} _SmallRadarTargetInfo_default_instance_;
class BigRadarTargetInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigRadarTargetInfo>
      _instance;
} _BigRadarTargetInfo_default_instance_;
namespace protobuf_data_2eproto {
static void InitDefaultsSmallRadarTargetInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SmallRadarTargetInfo_default_instance_;
    new (ptr) ::SmallRadarTargetInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmallRadarTargetInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SmallRadarTargetInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSmallRadarTargetInfo}, {}};

static void InitDefaultsBigRadarTargetInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BigRadarTargetInfo_default_instance_;
    new (ptr) ::BigRadarTargetInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BigRadarTargetInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BigRadarTargetInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBigRadarTargetInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SmallRadarTargetInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BigRadarTargetInfo.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SmallRadarTargetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SmallRadarTargetInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SmallRadarTargetInfo, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SmallRadarTargetInfo, rad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SmallRadarTargetInfo, fi_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BigRadarTargetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BigRadarTargetInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BigRadarTargetInfo, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BigRadarTargetInfo, rad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BigRadarTargetInfo, fi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BigRadarTargetInfo, speedx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BigRadarTargetInfo, speedy_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SmallRadarTargetInfo)},
  { 9, -1, sizeof(::BigRadarTargetInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SmallRadarTargetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BigRadarTargetInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "data.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ndata.proto\"M\n\024SmallRadarTargetInfo\022\n\n\002"
      "id\030\001 \001(\005\022\020\n\010priority\030\002 \001(\001\022\013\n\003rad\030\003 \001(\001\022"
      "\n\n\002fi\030\004 \001(\001\"k\n\022BigRadarTargetInfo\022\n\n\002id\030"
      "\001 \001(\005\022\020\n\010priority\030\002 \001(\001\022\013\n\003rad\030\003 \001(\001\022\n\n\002"
      "fi\030\004 \001(\001\022\016\n\006speedX\030\005 \001(\001\022\016\n\006speedY\030\006 \001(\001"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_data_2eproto

// ===================================================================

void SmallRadarTargetInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmallRadarTargetInfo::kIdFieldNumber;
const int SmallRadarTargetInfo::kPriorityFieldNumber;
const int SmallRadarTargetInfo::kRadFieldNumber;
const int SmallRadarTargetInfo::kFiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmallRadarTargetInfo::SmallRadarTargetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_SmallRadarTargetInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmallRadarTargetInfo)
}
SmallRadarTargetInfo::SmallRadarTargetInfo(const SmallRadarTargetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:SmallRadarTargetInfo)
}

void SmallRadarTargetInfo::SharedCtor() {
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(id_));
}

SmallRadarTargetInfo::~SmallRadarTargetInfo() {
  // @@protoc_insertion_point(destructor:SmallRadarTargetInfo)
  SharedDtor();
}

void SmallRadarTargetInfo::SharedDtor() {
}

void SmallRadarTargetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SmallRadarTargetInfo::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SmallRadarTargetInfo& SmallRadarTargetInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_SmallRadarTargetInfo.base);
  return *internal_default_instance();
}


void SmallRadarTargetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SmallRadarTargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

bool SmallRadarTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SmallRadarTargetInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rad = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SmallRadarTargetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SmallRadarTargetInfo)
  return false;
#undef DO_
}

void SmallRadarTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SmallRadarTargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double priority = 2;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->priority(), output);
  }

  // double rad = 3;
  if (this->rad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rad(), output);
  }

  // double fi = 4;
  if (this->fi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fi(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SmallRadarTargetInfo)
}

::google::protobuf::uint8* SmallRadarTargetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SmallRadarTargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double priority = 2;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->priority(), target);
  }

  // double rad = 3;
  if (this->rad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rad(), target);
  }

  // double fi = 4;
  if (this->fi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fi(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmallRadarTargetInfo)
  return target;
}

size_t SmallRadarTargetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmallRadarTargetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double priority = 2;
  if (this->priority() != 0) {
    total_size += 1 + 8;
  }

  // double rad = 3;
  if (this->rad() != 0) {
    total_size += 1 + 8;
  }

  // double fi = 4;
  if (this->fi() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmallRadarTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmallRadarTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SmallRadarTargetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SmallRadarTargetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmallRadarTargetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmallRadarTargetInfo)
    MergeFrom(*source);
  }
}

void SmallRadarTargetInfo::MergeFrom(const SmallRadarTargetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmallRadarTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.rad() != 0) {
    set_rad(from.rad());
  }
  if (from.fi() != 0) {
    set_fi(from.fi());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void SmallRadarTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmallRadarTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmallRadarTargetInfo::CopyFrom(const SmallRadarTargetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmallRadarTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmallRadarTargetInfo::IsInitialized() const {
  return true;
}

void SmallRadarTargetInfo::Swap(SmallRadarTargetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmallRadarTargetInfo::InternalSwap(SmallRadarTargetInfo* other) {
  using std::swap;
  swap(priority_, other->priority_);
  swap(rad_, other->rad_);
  swap(fi_, other->fi_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SmallRadarTargetInfo::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigRadarTargetInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigRadarTargetInfo::kIdFieldNumber;
const int BigRadarTargetInfo::kPriorityFieldNumber;
const int BigRadarTargetInfo::kRadFieldNumber;
const int BigRadarTargetInfo::kFiFieldNumber;
const int BigRadarTargetInfo::kSpeedXFieldNumber;
const int BigRadarTargetInfo::kSpeedYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigRadarTargetInfo::BigRadarTargetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_BigRadarTargetInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BigRadarTargetInfo)
}
BigRadarTargetInfo::BigRadarTargetInfo(const BigRadarTargetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:BigRadarTargetInfo)
}

void BigRadarTargetInfo::SharedCtor() {
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(id_));
}

BigRadarTargetInfo::~BigRadarTargetInfo() {
  // @@protoc_insertion_point(destructor:BigRadarTargetInfo)
  SharedDtor();
}

void BigRadarTargetInfo::SharedDtor() {
}

void BigRadarTargetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BigRadarTargetInfo::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigRadarTargetInfo& BigRadarTargetInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_BigRadarTargetInfo.base);
  return *internal_default_instance();
}


void BigRadarTargetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BigRadarTargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

bool BigRadarTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BigRadarTargetInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rad = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speedX = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speedx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speedY = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speedy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BigRadarTargetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BigRadarTargetInfo)
  return false;
#undef DO_
}

void BigRadarTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BigRadarTargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double priority = 2;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->priority(), output);
  }

  // double rad = 3;
  if (this->rad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rad(), output);
  }

  // double fi = 4;
  if (this->fi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fi(), output);
  }

  // double speedX = 5;
  if (this->speedx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speedx(), output);
  }

  // double speedY = 6;
  if (this->speedy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speedy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BigRadarTargetInfo)
}

::google::protobuf::uint8* BigRadarTargetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BigRadarTargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double priority = 2;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->priority(), target);
  }

  // double rad = 3;
  if (this->rad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rad(), target);
  }

  // double fi = 4;
  if (this->fi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fi(), target);
  }

  // double speedX = 5;
  if (this->speedx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speedx(), target);
  }

  // double speedY = 6;
  if (this->speedy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speedy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigRadarTargetInfo)
  return target;
}

size_t BigRadarTargetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigRadarTargetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double priority = 2;
  if (this->priority() != 0) {
    total_size += 1 + 8;
  }

  // double rad = 3;
  if (this->rad() != 0) {
    total_size += 1 + 8;
  }

  // double fi = 4;
  if (this->fi() != 0) {
    total_size += 1 + 8;
  }

  // double speedX = 5;
  if (this->speedx() != 0) {
    total_size += 1 + 8;
  }

  // double speedY = 6;
  if (this->speedy() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigRadarTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigRadarTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BigRadarTargetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigRadarTargetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigRadarTargetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigRadarTargetInfo)
    MergeFrom(*source);
  }
}

void BigRadarTargetInfo::MergeFrom(const BigRadarTargetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigRadarTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.rad() != 0) {
    set_rad(from.rad());
  }
  if (from.fi() != 0) {
    set_fi(from.fi());
  }
  if (from.speedx() != 0) {
    set_speedx(from.speedx());
  }
  if (from.speedy() != 0) {
    set_speedy(from.speedy());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void BigRadarTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigRadarTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigRadarTargetInfo::CopyFrom(const BigRadarTargetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigRadarTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigRadarTargetInfo::IsInitialized() const {
  return true;
}

void BigRadarTargetInfo::Swap(BigRadarTargetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigRadarTargetInfo::InternalSwap(BigRadarTargetInfo* other) {
  using std::swap;
  swap(priority_, other->priority_);
  swap(rad_, other->rad_);
  swap(fi_, other->fi_);
  swap(speedx_, other->speedx_);
  swap(speedy_, other->speedy_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BigRadarTargetInfo::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SmallRadarTargetInfo* Arena::CreateMaybeMessage< ::SmallRadarTargetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SmallRadarTargetInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BigRadarTargetInfo* Arena::CreateMaybeMessage< ::BigRadarTargetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::BigRadarTargetInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
