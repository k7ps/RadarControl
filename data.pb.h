// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_INCLUDED_data_2eproto
#define PROTOBUF_INCLUDED_data_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto 

namespace protobuf_data_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_data_2eproto
class BigRadarTargetInfo;
class BigRadarTargetInfoDefaultTypeInternal;
extern BigRadarTargetInfoDefaultTypeInternal _BigRadarTargetInfo_default_instance_;
class SmallRadarTargetInfo;
class SmallRadarTargetInfoDefaultTypeInternal;
extern SmallRadarTargetInfoDefaultTypeInternal _SmallRadarTargetInfo_default_instance_;
namespace google {
namespace protobuf {
template<> ::BigRadarTargetInfo* Arena::CreateMaybeMessage<::BigRadarTargetInfo>(Arena*);
template<> ::SmallRadarTargetInfo* Arena::CreateMaybeMessage<::SmallRadarTargetInfo>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class SmallRadarTargetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SmallRadarTargetInfo) */ {
 public:
  SmallRadarTargetInfo();
  virtual ~SmallRadarTargetInfo();

  SmallRadarTargetInfo(const SmallRadarTargetInfo& from);

  inline SmallRadarTargetInfo& operator=(const SmallRadarTargetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmallRadarTargetInfo(SmallRadarTargetInfo&& from) noexcept
    : SmallRadarTargetInfo() {
    *this = ::std::move(from);
  }

  inline SmallRadarTargetInfo& operator=(SmallRadarTargetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SmallRadarTargetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmallRadarTargetInfo* internal_default_instance() {
    return reinterpret_cast<const SmallRadarTargetInfo*>(
               &_SmallRadarTargetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SmallRadarTargetInfo* other);
  friend void swap(SmallRadarTargetInfo& a, SmallRadarTargetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmallRadarTargetInfo* New() const final {
    return CreateMaybeMessage<SmallRadarTargetInfo>(NULL);
  }

  SmallRadarTargetInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SmallRadarTargetInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SmallRadarTargetInfo& from);
  void MergeFrom(const SmallRadarTargetInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmallRadarTargetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double priority = 2;
  void clear_priority();
  static const int kPriorityFieldNumber = 2;
  double priority() const;
  void set_priority(double value);

  // double rad = 3;
  void clear_rad();
  static const int kRadFieldNumber = 3;
  double rad() const;
  void set_rad(double value);

  // double fi = 4;
  void clear_fi();
  static const int kFiFieldNumber = 4;
  double fi() const;
  void set_fi(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SmallRadarTargetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double priority_;
  double rad_;
  double fi_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BigRadarTargetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BigRadarTargetInfo) */ {
 public:
  BigRadarTargetInfo();
  virtual ~BigRadarTargetInfo();

  BigRadarTargetInfo(const BigRadarTargetInfo& from);

  inline BigRadarTargetInfo& operator=(const BigRadarTargetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BigRadarTargetInfo(BigRadarTargetInfo&& from) noexcept
    : BigRadarTargetInfo() {
    *this = ::std::move(from);
  }

  inline BigRadarTargetInfo& operator=(BigRadarTargetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BigRadarTargetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigRadarTargetInfo* internal_default_instance() {
    return reinterpret_cast<const BigRadarTargetInfo*>(
               &_BigRadarTargetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BigRadarTargetInfo* other);
  friend void swap(BigRadarTargetInfo& a, BigRadarTargetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BigRadarTargetInfo* New() const final {
    return CreateMaybeMessage<BigRadarTargetInfo>(NULL);
  }

  BigRadarTargetInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BigRadarTargetInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BigRadarTargetInfo& from);
  void MergeFrom(const BigRadarTargetInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigRadarTargetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double priority = 2;
  void clear_priority();
  static const int kPriorityFieldNumber = 2;
  double priority() const;
  void set_priority(double value);

  // double rad = 3;
  void clear_rad();
  static const int kRadFieldNumber = 3;
  double rad() const;
  void set_rad(double value);

  // double fi = 4;
  void clear_fi();
  static const int kFiFieldNumber = 4;
  double fi() const;
  void set_fi(double value);

  // double speedX = 5;
  void clear_speedx();
  static const int kSpeedXFieldNumber = 5;
  double speedx() const;
  void set_speedx(double value);

  // double speedY = 6;
  void clear_speedy();
  static const int kSpeedYFieldNumber = 6;
  double speedy() const;
  void set_speedy(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BigRadarTargetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double priority_;
  double rad_;
  double fi_;
  double speedx_;
  double speedy_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SmallRadarTargetInfo

// int32 id = 1;
inline void SmallRadarTargetInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 SmallRadarTargetInfo::id() const {
  // @@protoc_insertion_point(field_get:SmallRadarTargetInfo.id)
  return id_;
}
inline void SmallRadarTargetInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SmallRadarTargetInfo.id)
}

// double priority = 2;
inline void SmallRadarTargetInfo::clear_priority() {
  priority_ = 0;
}
inline double SmallRadarTargetInfo::priority() const {
  // @@protoc_insertion_point(field_get:SmallRadarTargetInfo.priority)
  return priority_;
}
inline void SmallRadarTargetInfo::set_priority(double value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:SmallRadarTargetInfo.priority)
}

// double rad = 3;
inline void SmallRadarTargetInfo::clear_rad() {
  rad_ = 0;
}
inline double SmallRadarTargetInfo::rad() const {
  // @@protoc_insertion_point(field_get:SmallRadarTargetInfo.rad)
  return rad_;
}
inline void SmallRadarTargetInfo::set_rad(double value) {
  
  rad_ = value;
  // @@protoc_insertion_point(field_set:SmallRadarTargetInfo.rad)
}

// double fi = 4;
inline void SmallRadarTargetInfo::clear_fi() {
  fi_ = 0;
}
inline double SmallRadarTargetInfo::fi() const {
  // @@protoc_insertion_point(field_get:SmallRadarTargetInfo.fi)
  return fi_;
}
inline void SmallRadarTargetInfo::set_fi(double value) {
  
  fi_ = value;
  // @@protoc_insertion_point(field_set:SmallRadarTargetInfo.fi)
}

// -------------------------------------------------------------------

// BigRadarTargetInfo

// int32 id = 1;
inline void BigRadarTargetInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 BigRadarTargetInfo::id() const {
  // @@protoc_insertion_point(field_get:BigRadarTargetInfo.id)
  return id_;
}
inline void BigRadarTargetInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BigRadarTargetInfo.id)
}

// double priority = 2;
inline void BigRadarTargetInfo::clear_priority() {
  priority_ = 0;
}
inline double BigRadarTargetInfo::priority() const {
  // @@protoc_insertion_point(field_get:BigRadarTargetInfo.priority)
  return priority_;
}
inline void BigRadarTargetInfo::set_priority(double value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:BigRadarTargetInfo.priority)
}

// double rad = 3;
inline void BigRadarTargetInfo::clear_rad() {
  rad_ = 0;
}
inline double BigRadarTargetInfo::rad() const {
  // @@protoc_insertion_point(field_get:BigRadarTargetInfo.rad)
  return rad_;
}
inline void BigRadarTargetInfo::set_rad(double value) {
  
  rad_ = value;
  // @@protoc_insertion_point(field_set:BigRadarTargetInfo.rad)
}

// double fi = 4;
inline void BigRadarTargetInfo::clear_fi() {
  fi_ = 0;
}
inline double BigRadarTargetInfo::fi() const {
  // @@protoc_insertion_point(field_get:BigRadarTargetInfo.fi)
  return fi_;
}
inline void BigRadarTargetInfo::set_fi(double value) {
  
  fi_ = value;
  // @@protoc_insertion_point(field_set:BigRadarTargetInfo.fi)
}

// double speedX = 5;
inline void BigRadarTargetInfo::clear_speedx() {
  speedx_ = 0;
}
inline double BigRadarTargetInfo::speedx() const {
  // @@protoc_insertion_point(field_get:BigRadarTargetInfo.speedX)
  return speedx_;
}
inline void BigRadarTargetInfo::set_speedx(double value) {
  
  speedx_ = value;
  // @@protoc_insertion_point(field_set:BigRadarTargetInfo.speedX)
}

// double speedY = 6;
inline void BigRadarTargetInfo::clear_speedy() {
  speedy_ = 0;
}
inline double BigRadarTargetInfo::speedy() const {
  // @@protoc_insertion_point(field_get:BigRadarTargetInfo.speedY)
  return speedy_;
}
inline void BigRadarTargetInfo::set_speedy(double value) {
  
  speedy_ = value;
  // @@protoc_insertion_point(field_set:BigRadarTargetInfo.speedY)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_data_2eproto
